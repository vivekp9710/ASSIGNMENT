Q1. Create REST API for Task Management
A1. Let's create a REST API for managing tasks. We'll include the basic CRUD operations: GET, POST, DELETE, PUT, and PATCH.

Steps to Create the API

1.Initialize the Project

Create a new directory for your project and navigate into it:

mkdir task-manager-api
cd task-manager-api

Initialize a new Node.js project:

npm init -y

2.Install Dependencies
Install Express and a body parser middleware:

npm install express body-parser

3.Create the Server

Create an index.js file and set up the Express server:

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

let tasks = [];
let id = 1;

// GET /tasks - Retrieve all tasks
app.get('/tasks', (req, res) => {
  res.json(tasks);
});

// POST /tasks - Create a new task
app.post('/tasks', (req, res) => {
  const newTask = {
    id: id++,
    title: req.body.title,
    completed: false,
  };
  tasks.push(newTask);
  res.status(201).json(newTask);
});

// GET /tasks/:id - Retrieve a task by ID
app.get('/tasks/:id', (req, res) => {
  const task = tasks.find((t) => t.id === parseInt(req.params.id));
  if (!task) return res.status(404).send('Task not found');
  res.json(task);
});

// PUT /tasks/:id - Update a task by ID
app.put('/tasks/:id', (req, res) => {
  const task = tasks.find((t) => t.id === parseInt(req.params.id));
  if (!task) return res.status(404).send('Task not found');

  task.title = req.body.title;
  task.completed = req.body.completed;
  res.json(task);
});

// PATCH /tasks/:id - Partially update a task by ID
app.patch('/tasks/:id', (req, res) => {
  const task = tasks.find((t) => t.id === parseInt(req.params.id));
  if (!task) return res.status(404).send('Task not found');

  if (req.body.title !== undefined) {
    task.title = req.body.title;
  }
  if (req.body.completed !== undefined) {
    task.completed = req.body.completed;
  }
  res.json(task);
});

// DELETE /tasks/:id - Delete a task by ID
app.delete('/tasks/:id', (req, res) => {
  const taskIndex = tasks.findIndex((t) => t.id === parseInt(req.params.id));
  if (taskIndex === -1) return res.status(404).send('Task not found');

  tasks.splice(taskIndex, 1);
  res.status(204).send();
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});





Running the Server
Run the server using:

node index.js
The server will be running on http://localhost:3000.

TESTING THE API 
You can use tool like POSTMAN



Q2. Create Rest API (get, post, delete, put, patch) for online shopping application.
A2. A2. Now, let's create a REST API for an online shopping application with basic CRUD operations for products.

Steps to Create the API

1.Initialize the Project

Create a new directory for your project and navigate into it:

mkdir shopping-api
cd shopping-api

Initialize a new Node.js project:
npm init -y

2.Install depenedencies

Install Express and a body parser middleware:
npm install express body-parser

3.Create the Server

Create an index.js file and set up the Express server:

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

let products = [];
let productId = 1;

// GET /products - Retrieve all products
app.get('/products', (req, res) => {
  res.json(products);
});

// POST /products - Create a new product
app.post('/products', (req, res) => {
  const newProduct = {
    id: productId++,
    name: req.body.name,
    description: req.body.description,
    price: req.body.price,
    inStock: req.body.inStock,
  };
  products.push(newProduct);
  res.status(201).json(newProduct);
});

// GET /products/:id - Retrieve a product by ID
app.get('/products/:id', (req, res) => {
  const product = products.find((p) => p.id === parseInt(req.params.id));
  if (!product) return res.status(404).send('Product not found');
  res.json(product);
});

// PUT /products/:id - Update a product by ID
app.put('/products/:id', (req, res) => {
  const product = products.find((p) => p.id === parseInt(req.params.id));
  if (!product) return res.status(404).send('Product not found');

  product.name = req.body.name;
  product.description = req.body.description;
  product.price = req.body.price;
  product.inStock = req.body.inStock;
  res.json(product);
});

// PATCH /products/:id - Partially update a product by ID
app.patch('/products/:id', (req, res) => {
  const product = products.find((p) => p.id === parseInt(req.params.id));
  if (!product) return res.status(404).send('Product not found');

  if (req.body.name !== undefined) {
    product.name = req.body.name;
  }
  if (req.body.description !== undefined) {
    product.description = req.body.description;
  }
  if (req.body.price !== undefined) {
    product.price = req.body.price;
  }
  if (req.body.inStock !== undefined) {
    product.inStock = req.body.inStock;
  }
  res.json(product);
});

// DELETE /products/:id - Delete a product by ID
app.delete('/products/:id', (req, res) => {
  const productIndex = products.findIndex((p) => p.id === parseInt(req.params.id));
  if (productIndex === -1) return res.status(404).send('Product not found');

  products.splice(productIndex, 1);
  res.status(204).send();
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


Running the Server
Run the server using:

node index.js
The server will be running on http://localhost:3000.

TESTING THE API 
You can use tool like POSTMAN

